

function SP_CloserToSourceThan(value)
  local errorTrue = {
    ConditionError("DistanceGreaterThan_True", { ConditionErrorData.MakeFromNumber(value, EErrorDataType.Distance) }) }
  local errorFalse = {
    ConditionError("DistanceGreaterThan_False", { ConditionErrorData.MakeFromNumber(value, EErrorDataType.Distance) }) }
  return ConditionResult(DistanceToSource() > value, errorFalse, errorTrue)
end


function SP_BulkRemoveStatus(entity, statuses)
  local entity = entity or context.Source
  local statuses = statuses or {}

  if statuses ~= nil then
    for _, status in ipairs(statuses) do
      if HasStatus(status, entity) then
        RemoveStatus(entity, status)
      end
    end
  end
end

function SP_IsActivePred(entity)
    entity = entity or context.Target
    return HasStatus('SP_Stuffed', entity)
end

function SP_IsPredOfPrey(pred, prey)
    pred = pred or context.Target
    prey = prey or context.Source
    return HasAnyStatus({'SP_InLocus_O','SP_InLocus_A','SP_InLocus_U','SP_InLocus_C'},{},{}, prey, pred, false)
end


function SP_CanVore()
    if HasStatus('SP_CooldownSwallow', context.Source).Result or HasStatus('SP_SC_BlockVoreTotal', context.Source).Result or HasStatus('SP_Inedible', context.Target).Result then
        return ConditionResult(false)
    end
    if SP_IsPredOfPrey(context.Target, context.Source).Result then
        return ConditionResult(false)
    end
    return ((Character() & ~Dead() | Item()) & IsMovable()) & ~Self() & CanShoveWeight() & ~Grounded() & ~Tagged('GASEOUS_FORM') & ~Tagged('CANT_SHOVE_THROW') & ~Tagged('Inedible')
end

function SwallowCheck(lethal)
    local pred = context.Source
    local prey = context.Target
    local lethal = lethal or false
    -- when used in conditions, bools must be turned into ConditionResults
    local willing = (Ally() & ~ConditionResult(lethal)) | (Party(pred) & Party(prey)) | Item()
    if not willing.Result then

        local adv = IsSneakingOrInvisible() | HasPassive('SP_StretchyMaw', pred) | HasStatus('SP_RavenousStatus', pred) | HasStatus('SP_Tasty', prey) | IsCrowdControlled(prey)
        local disadv = HasEvasion() | HasStatus('SP_Disgusting', prey) | SP_IsActivePred(prey)

        local preySkill = math.max(prey.GetPassiveSkill(Skill.Athletics),prey.GetPassiveSkill(Skill.Acrobatics))

        local predSkill = Skill.Athletics
        if pred.GetPassiveSkill(Skill.Acrobatics) > pred.GetPassiveSkill(predSkill) then
            predSkill = Skill.Acrobatics
        end
        if HasPassive('SP_SC_GreatHunger', pred).Result and pred.GetPassiveSkill(Skill.Intimidation) > pred.GetPassiveSkill(predSkill) then
            predSkill = Skill.Intimidation
        end

        local skillCheck = SkillCheck(predSkill, preySkill, adv, disadv)
        return ConditionResult(skillCheck.Result,{},{},skillCheck.Chance)
    end
    return willing
end

-- unused?
function SP_SC_GetStomachShelterTempHPStatus(turns)

    if StatusDurationEqualOrMoreThan(context.Source, 'SP_SC_StomachShelterStuffed', turns).Result then
        return true
    end
    return false
end
